{"name":"clone.js Nano","tagline":"Prototype-based nano-framework in three lines of code","body":"clone.js Nano\r\n=====\r\n\r\nThe true prototype-based nano-framework.\r\nThis is all sources:\r\n```php\r\nfunction clone(/** Object */proto, /** object.literalOnly! */properdies){\r\n    properdies.__proto__ = proto;\r\n    return properdies;\r\n}\r\n```\r\n### What is the clone?\r\n\r\n`clone()` function produces new objects — clones.  \r\n**Clone — this is the lazy shallow copy**, i.e., it is actually not a copy, it's just a reference to the object,\r\nwith one difference: if you will add/replace any of its properties, it would not affect the cloned object (prototype).  \r\nAll JavaScript objects are clones of `Object.prototype` (except itself and objects, created by `Object.create(null)`).\r\n\r\n### How to use\r\n\r\nForget about classes.    \r\nInstead of creating class (function), create prototype (object):\r\n```javascript\r\nvar duck$ = {\r\n    quack: function(){\r\n        console.log( this.firstName +\" \"+ this.lastName +\": Quack-quack!\");\r\n    }\r\n};\r\n```\r\n*The classic way:*\r\n```javascript\r\nvar Duck = function(firstName, lastName){\r\n    this.firstName = firstName;\r\n    this.lastName = lastName;\r\n}\r\nDuck.prototype.quack = function(){\r\n    console.log( this.firstName +\" \"+ this.lastName +\": Quack-quack!\");\r\n}\r\n```\r\nInheritance is simple (talkingDuck$ extends duck$):\r\n```javascript\r\nvar talkingDuck$ = clone(duck$, {\r\n    quack: function(){\r\n        duck$.quack.call(this);\r\n        console.log(\"My name is \"+ this.name +\"!\");\r\n    }\r\n});\r\n```\r\n*The classic way:*\r\n```javascript\r\nvar TalkingDuck = function(name){\r\n    Duck.apply(this, arguments);\r\n}\r\nTalkingDuck.prototype = new Duck;\r\nTalkingDuck.prototype.constructor = TalkingDuck;\r\nTalkingDuck.prototype.quack = function(){\r\n    Duck.prototype.quack.call(this);\r\n    console.log(\"My name is \"+ this.name +\"!\");\r\n}\r\n```\r\nForget about the `new` operator, use `clone` to create instances:\r\n```javascript\r\nvar donald = clone(talkingDuck$, {firstName: \"Donald\", lastName: \"Duck\"});\r\ndonald.quack();// Donald Duck: Quack-quack! \r\n               // My name is Donald!\r\n```\r\n*The classic way:*\r\n```javascript\r\nvar daffy = new TalkingDuck(\"Daffy\", \"Duck\");\r\ndaffy.quack();// Daffy Duck: Quack-quack! \r\n               // My name is Daffy!\r\n```\r\nForget about the `instanceof` operator, use JS native `.isPrototypeOf()` method instead:\r\n```javascript\r\nduck$.isPrototypeOf(donald);// true\r\n```\r\n*The classic way:*\r\n```javascript\r\ndaffy instanceof Duck;// true\r\n```\r\n----\r\nIf you like this idea, plese look at www.clonejs.org\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}