{"name":"clone.js Nano","tagline":"The true prototype-based nano-framework in three lines of JavaScript","body":"clone.js Nano\r\n=====\r\n\r\nThe [true prototype-based⠙](http://en.wikipedia.org/wiki/Prototype-based_programming) nano-framework.\r\nThis is all sources:\r\n```php\r\nfunction clone(/** Object */proto, /** object.literalOnly! */properdies){\r\n    properdies.__proto__ = proto;\r\n    return properdies;\r\n}\r\n```\r\n### It really fast!\r\n\r\nIt faster than any other framework, even VanillaJS! Yes, it creates class-objects faster than JS core creates class-functions!  \r\nSee http://jsperf.com/clonejs-nano-vs-vanillajs\r\n[![CloneJS Nano vs VanillaJS](http://habrastorage.org/storage2/a87/6e3/31d/a876e331d1f3caaa2d4002b958456d3a.png)](http://jsperf.com/clonejs-nano-vs-vanillajs)\r\n\r\n### What is the clone?\r\n\r\n`clone` function produces new objects — clones.  \r\n**Clone — this is the lazy shallow copy**, i.e., it is actually not a copy, it's just a reference to the object,\r\nwith one difference: if you will add/replace any of its properties, it would not affect the cloned object (prototype).  \r\nAll JavaScript objects are clones of `Object.prototype` (except itself and objects, created by `Object.create(null)`).  \r\n[Read more⠙](http://www.2ality.com/2011/11/javascript-classes.html)\r\n\r\n### How to use\r\n\r\nForget about classes.    \r\nInstead of creating class (function), create prototype (object):\r\n```javascript\r\nvar duck$ = {// $ postfix means prototype: duck$ === Duck.prototype\r\n    name:  \"Duck\",// default name\r\n    color: \"\",\r\n    canFly: true,\r\n    quack: function(){\r\n        console.log( this.name +\": Quack-quack!\");\r\n    }\r\n};\r\n```\r\n*The classic way:*\r\n```javascript\r\nvar Duck = function(name, color, canFly){\r\n    this.name  = name  || \"Duck\";\r\n    this.color = color || \"\";\r\n    this.canFly= canFly === undefined ? true : canFly;  \r\n}\r\nDuck.prototype.quack = function(){\r\n    console.log(this.name +\": Quack-quack!\");\r\n}\r\n```\r\nInheritance is simple (talkingDuck prototype extends duck prototype):\r\n```javascript\r\nvar talkingDuck$ = clone(duck$, {\r\n    firstName: \"\",\r\n    lastName: \"Duck\",\r\n    \r\n    quack: function(){\r\n        duck$.quack.call(this);\r\n        console.log(\"My name is \"+ this.name +\"!\");\r\n    },\r\n    // backward compability with duck$ interface:\r\n    get name(){\r\n        return (this.firstName +\" \"+ this.lastName).trim();\r\n    },\r\n    set name(newName){\r\n        var names = newName.split(\" \");\r\n        this.firstName = names[0];\r\n        if(names.length > 1){\r\n            this.lastName = names[1];\r\n        }\r\n    }    \r\n});\r\n```\r\n*The classic way:*\r\n```javascript\r\nvar TalkingDuck = function(firstName, lastName, color, canFly){\r\n    this.firstName = firstName;\r\n    this.lastName = lastName || \"Duck\";\r\n    this.color = color || \"\";\r\n    this.canFly= canFly === undefined ? true : canFly;\r\n}\r\nvar TmpSafeProto = function(){};\r\nTmpSafeProto.prototype = Duck.prototype;\r\nTalkingDuck.prototype = new TmpSafeProto;\r\nTalkingDuck.prototype.constructor = TalkingDuck;\r\nTalkingDuck.prototype.quack = function(){\r\n    Duck.prototype.quack.call(this);\r\n    console.log(\"My name is \"+ this.name +\"!\");\r\n}\r\n// backward compability with Duck interface:\r\nObject.defineProperty(TalkingDuck.prototype, 'name', {\r\n    get: function(){\r\n        return (this.firstName +\" \"+ this.lastName).trim();\r\n    },\r\n    set: function(newName){\r\n        var names = newName.split(\" \");\r\n        this.firstName = names[0];\r\n        if(names.length > 1){\r\n            this.lastName = names[1];\r\n        }\r\n    }\r\n});\r\n```\r\nForget about the `new` operator, use `clone` to create instances:\r\n```javascript\r\nvar donald = clone(talkingDuck$, {firstName: \"Donald\", color: \"White\", canFly: false});\r\ndonald.quack();// Donald Duck: Quack-quack! \r\n               // My name is Donald!\r\n```\r\n*The classic way:*\r\n```javascript\r\nvar daffy = new TalkingDuck(\"Daffy\", undefined, \"Black\", false);\r\ndaffy.quack();// Daffy Duck: Quack-quack! \r\n               // My name is Daffy!\r\n```\r\nForget about the `instanceof` operator, use JS native `.isPrototypeOf()` method instead:\r\n```javascript\r\nduck$.isPrototypeOf(donald);// true\r\n```\r\n*The classic way:*\r\n```javascript\r\ndaffy instanceof Duck;// true\r\n```\r\n----\r\nIf you like this idea, plese look at www.github.com/quadroid/clonejs\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}